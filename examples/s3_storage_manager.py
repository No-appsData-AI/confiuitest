#!/usr/bin/env python3
"""
S3 Storage Manager –¥–ª—è ComfyUI
–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 1.0.0

–ö–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å AWS S3 –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import os
import boto3
import json
import hashlib
from datetime import datetime
from typing import Dict, List, Optional, Tuple, Union
from botocore.exceptions import ClientError, NoCredentialsError
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class S3StorageManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AWS S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
    """
    
    def __init__(self, 
                 bucket_name: str,
                 aws_access_key_id: Optional[str] = None,
                 aws_secret_access_key: Optional[str] = None,
                 region_name: str = 'us-east-1',
                 endpoint_url: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        
        Args:
            bucket_name: –ù–∞–∑–≤–∞–Ω–∏–µ S3 bucket
            aws_access_key_id: AWS Access Key ID
            aws_secret_access_key: AWS Secret Access Key
            region_name: AWS —Ä–µ–≥–∏–æ–Ω
            endpoint_url: URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å MinIO –∏ –¥—Ä.)
        """
        self.bucket_name = bucket_name
        self.region_name = region_name
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.aws_access_key_id = aws_access_key_id or os.getenv('AWS_ACCESS_KEY_ID')
        self.aws_secret_access_key = aws_secret_access_key or os.getenv('AWS_SECRET_ACCESS_KEY')
        
        if not self.aws_access_key_id or not self.aws_secret_access_key:
            raise ValueError("AWS credentials not provided. Set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables.")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞
        self.s3_client = boto3.client(
            's3',
            aws_access_key_id=self.aws_access_key_id,
            aws_secret_access_key=self.aws_secret_access_key,
            region_name=self.region_name,
            endpoint_url=endpoint_url
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ bucket
        self._check_bucket_access()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
        self._create_folder_structure()
    
    def _check_bucket_access(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ bucket"""
        try:
            self.s3_client.head_bucket(Bucket=self.bucket_name)
            logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ bucket '{self.bucket_name}' –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
            return True
        except ClientError as e:
            error_code = e.response['Error']['Code']
            if error_code == '404':
                logger.error(f"‚ùå Bucket '{self.bucket_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            elif error_code == '403':
                logger.error(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ bucket '{self.bucket_name}'")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ bucket: {error_code}")
            raise
    
    def _create_folder_structure(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –≤ S3"""
        folders = [
            'comfyui/images/',
            'comfyui/workflows/',
            'comfyui/metadata/',
            'comfyui/temp/',
            'comfyui/backups/'
        ]
        
        for folder in folders:
            try:
                self.s3_client.put_object(
                    Bucket=self.bucket_name,
                    Key=folder,
                    Body=''
                )
                logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder}")
            except ClientError as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É {folder}: {e}")
    
    def upload_image(self, 
                    image_path: str, 
                    s3_key: Optional[str] = None,
                    metadata: Optional[Dict] = None) -> Dict:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ S3
        
        Args:
            image_path: –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            s3_key: –ö–ª—é—á –≤ S3 (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        """
        try:
            if not os.path.exists(image_path):
                raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ S3 –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
            if not s3_key:
                filename = os.path.basename(image_path)
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                s3_key = f"comfyui/images/{timestamp}_{filename}"
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            file_metadata = {
                'upload_time': datetime.now().isoformat(),
                'original_path': image_path,
                'file_size': os.path.getsize(image_path),
                'file_type': os.path.splitext(image_path)[1].lower()
            }
            
            if metadata:
                file_metadata.update(metadata)
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            with open(image_path, 'rb') as file:
                self.s3_client.upload_fileobj(
                    file,
                    self.bucket_name,
                    s3_key,
                    ExtraArgs={'Metadata': file_metadata}
                )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ URL
            url = self.get_file_url(s3_key)
            
            result = {
                'success': True,
                's3_key': s3_key,
                'url': url,
                'metadata': file_metadata,
                'message': f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {s3_key}"
            }
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {s3_key}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return {
                'success': False,
                'error': str(e),
                'message': f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"
            }
    
    def download_image(self, 
                      s3_key: str, 
                      local_path: Optional[str] = None) -> Dict:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ S3
        
        Args:
            s3_key: –ö–ª—é—á —Ñ–∞–π–ª–∞ –≤ S3
            local_path: –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è)
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∫–∞—á–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        """
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
            if not local_path:
                filename = os.path.basename(s3_key)
                local_path = f"/tmp/{filename}"
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(local_path), exist_ok=True)
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            self.s3_client.download_file(self.bucket_name, s3_key, local_path)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            metadata = self.get_file_metadata(s3_key)
            
            result = {
                'success': True,
                'local_path': local_path,
                's3_key': s3_key,
                'metadata': metadata,
                'message': f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {local_path}"
            }
            
            logger.info(f"‚úÖ –°–∫–∞—á–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {s3_key} -> {local_path}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return {
                'success': False,
                'error': str(e),
                'message': f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"
            }
    
    def list_images(self, 
                   prefix: str = 'comfyui/images/',
                   max_keys: int = 100) -> Dict:
        """
        –°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ S3
        
        Args:
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
            max_keys: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π
            
        Returns:
            Dict —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤
        """
        try:
            response = self.s3_client.list_objects_v2(
                Bucket=self.bucket_name,
                Prefix=prefix,
                MaxKeys=max_keys
            )
            
            files = []
            if 'Contents' in response:
                for obj in response['Contents']:
                    files.append({
                        'key': obj['Key'],
                        'size': obj['Size'],
                        'last_modified': obj['LastModified'].isoformat(),
                        'url': self.get_file_url(obj['Key'])
                    })
            
            result = {
                'success': True,
                'files': files,
                'count': len(files),
                'message': f"–ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤"
            }
            
            logger.info(f"üìã –°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(files)} —Ñ–∞–π–ª–æ–≤")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
            return {
                'success': False,
                'error': str(e),
                'message': f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}"
            }
    
    def delete_image(self, s3_key: str) -> Dict:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ S3
        
        Args:
            s3_key: –ö–ª—é—á —Ñ–∞–π–ª–∞ –≤ S3
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            self.s3_client.delete_object(Bucket=self.bucket_name, Key=s3_key)
            
            result = {
                'success': True,
                's3_key': s3_key,
                'message': f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {s3_key}"
            }
            
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {s3_key}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return {
                'success': False,
                'error': str(e),
                'message': f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"
            }
    
    def get_file_url(self, s3_key: str, expires_in: int = 3600) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
        
        Args:
            s3_key: –ö–ª—é—á —Ñ–∞–π–ª–∞ –≤ S3
            expires_in: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ URL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
        """
        try:
            url = self.s3_client.generate_presigned_url(
                'get_object',
                Params={'Bucket': self.bucket_name, 'Key': s3_key},
                ExpiresIn=expires_in
            )
            return url
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL: {e}")
            return ""
    
    def get_file_metadata(self, s3_key: str) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞
        
        Args:
            s3_key: –ö–ª—é—á —Ñ–∞–π–ª–∞ –≤ S3
            
        Returns:
            Dict —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            response = self.s3_client.head_object(Bucket=self.bucket_name, Key=s3_key)
            return response.get('Metadata', {})
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}
    
    def save_workflow(self, 
                     workflow_data: Dict, 
                     workflow_name: Optional[str] = None) -> Dict:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ workflow –≤ S3
        
        Args:
            workflow_data: –î–∞–Ω–Ω—ã–µ workflow
            workflow_name: –ù–∞–∑–≤–∞–Ω–∏–µ workflow
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            if not workflow_name:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                workflow_name = f"workflow_{timestamp}.json"
            
            s3_key = f"comfyui/workflows/{workflow_name}"
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ workflow
            self.s3_client.put_object(
                Bucket=self.bucket_name,
                Key=s3_key,
                Body=json.dumps(workflow_data, indent=2),
                ContentType='application/json'
            )
            
            result = {
                'success': True,
                's3_key': s3_key,
                'workflow_name': workflow_name,
                'message': f"Workflow —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {s3_key}"
            }
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω workflow: {s3_key}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è workflow: {e}")
            return {
                'success': False,
                'error': str(e),
                'message': f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è workflow: {e}"
            }
    
    def load_workflow(self, workflow_name: str) -> Dict:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ workflow –∏–∑ S3
        
        Args:
            workflow_name: –ù–∞–∑–≤–∞–Ω–∏–µ workflow
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ workflow
        """
        try:
            s3_key = f"comfyui/workflows/{workflow_name}"
            
            response = self.s3_client.get_object(Bucket=self.bucket_name, Key=s3_key)
            workflow_data = json.loads(response['Body'].read().decode('utf-8'))
            
            result = {
                'success': True,
                'workflow_data': workflow_data,
                's3_key': s3_key,
                'message': f"Workflow –∑–∞–≥—Ä—É–∂–µ–Ω: {s3_key}"
            }
            
            logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω workflow: {s3_key}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ workflow: {e}")
            return {
                'success': False,
                'error': str(e),
                'message': f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ workflow: {e}"
            }
    
    def backup_images(self, backup_name: Optional[str] = None) -> Dict:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            backup_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            if not backup_name:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                backup_name = f"backup_{timestamp}"
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            images_list = self.list_images()
            if not images_list['success']:
                return images_list
            
            backup_data = {
                'backup_name': backup_name,
                'created_at': datetime.now().isoformat(),
                'images_count': len(images_list['files']),
                'images': images_list['files']
            }
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            s3_key = f"comfyui/backups/{backup_name}.json"
            self.s3_client.put_object(
                Bucket=self.bucket_name,
                Key=s3_key,
                Body=json.dumps(backup_data, indent=2),
                ContentType='application/json'
            )
            
            result = {
                'success': True,
                'backup_name': backup_name,
                's3_key': s3_key,
                'images_count': len(images_list['files']),
                'message': f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_name}"
            }
            
            logger.info(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return {
                'success': False,
                'error': str(e),
                'message': f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}"
            }
    
    def get_storage_info(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        """
        try:
            # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories = {
                'images': self.list_images('comfyui/images/'),
                'workflows': self.list_images('comfyui/workflows/'),
                'backups': self.list_images('comfyui/backups/')
            }
            
            total_files = sum(cat['count'] for cat in categories.values() if cat['success'])
            total_size = sum(
                sum(f['size'] for f in cat['files']) 
                for cat in categories.values() 
                if cat['success']
            )
            
            info = {
                'bucket_name': self.bucket_name,
                'region': self.region_name,
                'total_files': total_files,
                'total_size_bytes': total_size,
                'total_size_mb': round(total_size / (1024 * 1024), 2),
                'categories': {
                    name: {
                        'count': cat['count'] if cat['success'] else 0,
                        'files': cat['files'] if cat['success'] else []
                    }
                    for name, cat in categories.items()
                }
            }
            
            return {
                'success': True,
                'info': info,
                'message': f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—É—á–µ–Ω–∞"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {e}")
            return {
                'success': False,
                'error': str(e),
                'message': f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {e}"
            }


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    s3_manager = S3StorageManager(
        bucket_name="your-comfyui-bucket",
        aws_access_key_id="your-access-key",
        aws_secret_access_key="your-secret-key",
        region_name="us-east-1"
    )
    
    # –ü—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    result = s3_manager.upload_image(
        image_path="/path/to/image.png",
        metadata={"prompt": "A beautiful sunset", "model": "dall-e-3"}
    )
    print(result)
    
    # –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    images = s3_manager.list_images()
    print(f"–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images['count']}")
    
    # –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    info = s3_manager.get_storage_info()
    print(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {info['info']['total_size_mb']} MB") 